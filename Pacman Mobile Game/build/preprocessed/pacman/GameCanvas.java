package pacman;import javax.microedition.lcdui.*;public class GameCanvas extends javax.microedition.lcdui.Canvas {		private Display disp_;		private GameBoard gameBoard_;		private FrameTrigger frameTrigger_;			private pacman parentApp_;	public GameCanvas(pacman app, Display disp)	{		this.parentApp_ = app;		disp_ = disp;		gameBoard_ = GameBoardFactory.test();			}	protected void paint(Graphics g)	{				g.setColor(255,255,255);		g.fillRect(0,0,this.getWidth(),this.getHeight());				gameBoard_.paint(g);	}		public void destroyFrameTrigger()	{		frameTrigger_.stopTrigger();	}		public void show()	{		disp_.setCurrent(this);		frameTrigger_ = new FrameTrigger(this, 50);		frameTrigger_.startTrigger();		frameTrigger_.start();	}	public void advanceFrame()	{		if (gameBoard_.advanceFrame())		{			parentApp_.gameOver =0;			repaint();		}		else		{			destroyFrameTrigger();			parentApp_.gameOver = 1;			System.out.println("set gameover to 1");			try {				//parentApp_.gameOver = 1;				parentApp_.restartApp();			} catch (javax.microedition.midlet.MIDletStateChangeException midException) {				midException.printStackTrace();				System.exit(1);			}		}	}		protected void keyPressed(int keyCode)	{		int action = getGameAction(keyCode);		switch (action)		{			case UP:			  gameBoard_.getPacman().setDesiredDirection(			    PacmanActor.UP);			break;			case DOWN:			  gameBoard_.getPacman().setDesiredDirection(			    PacmanActor.DOWN);			break;			case LEFT:			  gameBoard_.getPacman().setDesiredDirection(			    PacmanActor.LEFT);			break;			case RIGHT:			  gameBoard_.getPacman().setDesiredDirection(			    PacmanActor.RIGHT);			break;		}	}}