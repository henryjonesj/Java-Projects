package pacman;import javax.microedition.lcdui.*;public class GhostActor{		public static final int NONE = 0;		public static final int UP = 1;		public static final int DOWN = 2;		public static final int LEFT = 3;		public static final int RIGHT = 4;	private GridNode myNode_;				private GridNode resetNode_;		private PacmanActor target_;		private int pixelX_;		private int pixelY_;			private int newPixelX_;			private int newPixelY_;				private static boolean runFromPac_;	public GhostActor(GridNode startingPosition, PacmanActor target)	{		myNode_ = startingPosition;		resetNode_ = startingPosition;		target_ = target;				pixelX_ = myNode_.pixelCenterX();		pixelY_ = myNode_.pixelCenterY();		newPixelX_ = pixelX_;		newPixelY_ = pixelY_;	}	public static void setRunFromPac(boolean b)	{ runFromPac_ = b; }			public GridNode getNode() {		return myNode_;	}			public void advanceFrame()	{			if ((pixelX_ != newPixelX_) || (pixelY_ != newPixelY_)) 		{						if (pixelX_ < newPixelX_) pixelX_++;			if (pixelX_ > newPixelX_ ) pixelX_--;			if (pixelY_ < newPixelY_) pixelY_++;			if (pixelY_ > newPixelY_ ) pixelY_--;		}		else		{						int pacX = target_.getNode().pixelCenterX();			int pacY = target_.getNode().pixelCenterY();								pacX -= pixelX_;			pacY -= pixelY_;						System.out.println("(" + pacX +"," + pacY + ")");			if (Math.abs(pacX) > Math.abs(pacY))			{				if (pacX > 0) moveTowards(RIGHT,UP,DOWN,LEFT);				else moveTowards(LEFT,DOWN,UP,RIGHT); 			}			else			{				if (pacY > 0) moveTowards(DOWN,LEFT,RIGHT,DOWN);				else moveTowards(UP,RIGHT,LEFT,UP);			}		}	}	private void moveTowards(int i1, int i2, int i3, int i4)	{				if (runFromPac_)		{			if ( goInDirection(i4) ) return;			if ( goInDirection(i3) ) return;			if ( goInDirection(i2) ) return;			if ( goInDirection(i1) ) return;		}		else		{			if ( goInDirection(i1) ) return;			if ( goInDirection(i2) ) return;			if ( goInDirection(i3) ) return;			if ( goInDirection(i4) ) return;		}	}	/**	 * Tries to start moving in the specified dirrection.	 * @param d desired dirrection in which to move	 * @return true if we can go in this dirrection	 **/	private boolean goInDirection(int d)	{		if (d == LEFT) return goToNode(myNode_.getLeft());		if (d == RIGHT) return goToNode(myNode_.getRight());		if (d == UP) return goToNode(myNode_.getUp());		if (d == DOWN) return goToNode(myNode_.getDown());		return false;	}	/**	 * @param n Goes to this node if it is not null	 * @return true when it's possible to go to the node	 **/	private boolean goToNode(GridNode n)	{		if (n == null) return false;		myNode_ = n;		newPixelX_ = myNode_.pixelCenterX();		newPixelY_ = myNode_.pixelCenterY();		return true;	}	/**	 * Paints the GhostActor	 * @param g Graphics object where drawing should take place.	 **/	public void paint(Graphics g)	{		g.setColor(0,0,0);		g.drawArc(pixelX_-4,			  pixelY_-4,			  8,8,			  0,			  360);	}	/**	 * Returns the current x coordinate of the ghost	 **/	public int getX()	{		return pixelX_;	}	/**	 * Returns the current y coordinate of the ghost	 **/	public int getY()	{		return pixelY_;	}/*Restart function:	Added 4-15-03 by Trevor Donarski		When pacman dies, this function will be called to move the ghosts to their initial	positions.  This will also ensure that if a ghost is on the start position when pacman	dies, he doesn't respawn exactly on top of the ghost and start a loop of infinite kills.*/	public void restart()	{		myNode_ = resetNode_;		pixelX_ = resetNode_.pixelCenterX();		pixelY_ = resetNode_.pixelCenterY();		newPixelX_ = pixelX_;		newPixelY_ = pixelY_;		}	}//----------------------------------------------------------------------------//